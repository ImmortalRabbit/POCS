dist: trusty
sudo: required
language: python

# apt-get runs first during build.
addons:
  apt:
    packages:
    - gphoto2
    - libcairo2-dev
    - libnetpbm10-dev
    - netpbm
    - libpng12-dev
    - libjpeg-dev
    - python-numpy
    - python-pyfits
    - python-dev
    - zlib1g-dev
    - libbz2-dev
    - swig
    - cfitsio-dev

# Services are started second.
services:
  - mongodb

# After services are started, the git repo is cloned.

python:
  - "3.6"
  
# Environment variables from the Travis repo config, then from .travis.yml, are exported.
env:
    - PANDIR=$HOME POCS=$TRAVIS_BUILD_DIR PANUSER=$USER ARDUINO_VERSION=1.8.1

# Caches are restored next, if they are available.
cache:
  pip: true
  directories:
    - $PANDIR/astrometry/
    - $PANDIR/cfitsio/

# Before_install commands run after caches have been restored.
before_install:
    - pwd
    - echo PATH=$PATH
    - mkdir -p $PANDIR/logs
    - ln -s $POCS $PANDIR/POCS
    - pip install -U pip
    - pip install coveralls

    # Install cfitsio
    - cd $PANDIR
    - |
      if [ -x $PANDIR/cfitsio/bin/fpack ] && [ -x $PANDIR/cfitsio/bin/funpack ] ; then
        echo "Can reuse built cfitsio"
      else
        echo "Fetching and building cfitsio"
        wget http://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/cfitsio_latest.tar.gz
        tar zxf cfitsio_latest.tar.gz
        cd $PANDIR/cfitsio
        ./configure
        make
        make fpack
        make funpack
      fi
    - |
      echo "Installing cfitsio (skipping sudo for Travis)"
      cd $PANDIR/cfitsio
      find . -type f -executable -ls
      make install
      find . -type f -executable -ls

    # Install arudino files
    - cd $PANDIR
    - export DISPLAY=:1.0
    - export
    - wget http://downloads.arduino.cc/arduino-${ARDUINO_VERSION}-linux64.tar.xz
    - tar xf arduino-${ARDUINO_VERSION}-linux64.tar.xz
    - sudo mv arduino-${ARDUINO_VERSION} /usr/local/share/arduino
    - sudo ln -s /usr/local/share/arduino/arduino /usr/local/bin/arduino
install:
  - cd $PANDIR

  # Install astrometry.net software.
  - |
    if [ -d $PANDIR/astrometry/bin ] ; then
      echo "Astrometry has been cached, woohoo!"
      find $PANDIR/astrometry -type f -executable -ls
    else
      mkdir -p $PANDIR/astrometry/data
      wget http://astrometry.net/downloads/astrometry.net-0.72.tar.gz
      tar zxvf astrometry.net-0.72.tar.gz
      cd astrometry.net-0.72
      make
      make py
      find . -type f -executable -ls
      make install INSTALL_DIR=$PANDIR/astrometry
      find . -type f -executable -ls
    fi
  # WHY DOES THIS USE sudo?
  - echo 'add_path $PANDIR/astrometry/data' | sudo tee --append $PANDIR/astrometry/etc/astrometry.cfg

  - |
    if [ -d $PANDIR/astrometry/data ] ; then
      ls -l $PANDIR/astrometry/data
    else
      echo "Astrometry data is missing."
    fi

  # Install miniconda
  - wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$HOME/cfitsio/bin:$PANDIR/astrometry/bin:$PATH"
  - hash -r

  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a # Useful for debugging any issues with conda
  - conda create -q -n test-environment python=$TRAVIS_PYTHON_VERSION
  - source activate test-environment

  # install POCS and requirements
  - cd $POCS
  - pip install -r requirements.txt
  - pip install -r docs/requirements.txt
  - pip install -e .
  - python pocs/utils/data.py --folder $PANDIR/astrometry/data ||
    /bin/echo "Warning, data file download failed! This may impact tests."
script:
  - export BOARD="arduino:avr:micro"
  - arduino --verify --board $BOARD resources/arduino_files/camera_board/camera_board.ino
  - arduino --verify --board $BOARD resources/arduino_files/power_board/power_board.ino
  - arduino --verify --board $BOARD resources/arduino_files/telemetry_board/telemetry_board.ino
  - export PYTHONPATH="$PYTHONPATH:$POCS/scripts/coverage"
  - export COVERAGE_PROCESS_START=.coveragerc
  - coverage run $(which pytest) -v --test-databases all
  - coverage combine
after_success:
  - bash <(curl -s https://codecov.io/bash)
